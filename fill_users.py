import csv
import random
import hashlib
import datetime
import secrets
import requests
import pyodbc

def fetch_famous_names():
    url = 'https://raw.githubusercontent.com/dominictarr/random-name/master/first-names.json'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return ['John', 'Jane', 'Alice', 'Bob']  # Fallback names

def fetch_famous_last_names():
    url = 'https://raw.githubusercontent.com/dominictarr/random-name/master/names.json'
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return ['Doe', 'Smith', 'Johnson', 'Brown']  # Fallback names

famous_names = fetch_famous_names()
famous_last_names = fetch_famous_last_names()

def generate_username():
    return random.choice(famous_names) + str(random.randint(1000, 9999))

def generate_email(username):
    domains = ['example.com', 'test.com', 'demo.com']
    return f"{username}@{random.choice(domains)}"

def generate_password_hash_and_salt(password):
    salt = secrets.token_hex(16)
    password_hash = hashlib.sha256((password + salt).encode()).hexdigest()
    return password_hash, salt

def generate_random_datetime():
    start = datetime.datetime(2000, 1, 1)
    end = datetime.datetime.now()
    return start + (end - start) * random.random()

def generate_user_data(num_users):
    users = []
    for _ in range(num_users):
        username = generate_username()
        email = generate_email(username)
        password = 'password123'  # In a real scenario, use a more secure method to generate passwords
        password_hash, salt = generate_password_hash_and_salt(password)
        created_at = generate_random_datetime()
        is_active = random.choice([0, 1])
        
        users.append({
            'UserID': None,  # This will be auto-generated by the database
            'Username': username,
            'Email': email,
            'PasswordHash': password_hash,
            'Salt': salt,
            'CreatedAt': created_at.strftime('%Y-%m-%d %H:%M:%S'),
            'IsActive': is_active
        })
    return users

def write_to_csv(users, filename='users.csv'):
    fieldnames = ['UserID', 'Username', 'Email', 'PasswordHash', 'Salt', 'CreatedAt', 'IsActive']
    with open(filename, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        for user in users:
            writer.writerow(user)

def generate_bio():
    bios = [
        "Loves coding and coffee.",
        "Avid reader and writer.",
        "Enjoys hiking and outdoor adventures.",
        "Tech enthusiast and gamer.",
        "Passionate about music and arts."
    ]
    return random.choice(bios)

def generate_profile_pic():
    return f"https://example.com/profile_pics/{random.randint(1, 100)}.jpg"

def read_users_csv(filename='users.csv'):
    users = []
    with open(filename, mode='r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            users.append(row)
    return users

def generate_user_profiles(users):
    profiles = []
    for user in users:
        profile = {
            'ProfileID': None,  # This will be auto-generated by the database
            'UserID': user['UserID'],
            'FirstName': random.choice(famous_names),
            'LastName': random.choice(famous_last_names),
            'Bio': generate_bio(),
            'ProfilePic': generate_profile_pic()
        }
        profiles.append(profile)
    return profiles

def write_profiles_to_csv(profiles, filename='user_profiles.csv'):
    fieldnames = ['ProfileID', 'UserID', 'FirstName', 'LastName', 'Bio', 'ProfilePic']
    with open(filename, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        for profile in profiles:
            writer.writerow(profile)

def insert_user_profiles_to_db(csv_filename, connection_string):
    conn = pyodbc.connect(connection_string)
    cursor = conn.cursor()

    with open(csv_filename, mode='r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            cursor.execute("""
                INSERT INTO UserProfiles (UserID, FirstName, LastName, Bio, ProfilePic)
                VALUES (?, ?, ?, ?, ?)
            """, row['UserID'], row['FirstName'], row['LastName'], row['Bio'], row['ProfilePic'])
    
    conn.commit()
    cursor.close()
    conn.close()

if __name__ == "__main__":
    num_users = 100  # Number of users to generate
    users = generate_user_data(num_users)
    write_to_csv(users)

    users = read_users_csv()
    profiles = generate_user_profiles(users)
    write_profiles_to_csv(profiles)

    connection_string = 'DRIVER={SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password'
    insert_user_profiles_to_db('user_profiles.csv', connection_string)